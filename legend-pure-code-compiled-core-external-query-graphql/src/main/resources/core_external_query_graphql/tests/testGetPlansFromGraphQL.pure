/*
  HG: Remove global comments and stick into welcome.pure to test


###Pure
Class meta::legend::crud::hugo::tests::domain::Employee
{
  name: String[1];
}

Class meta::legend::crud::hugo::tests::domain::Firm
{
  name : String[1];
  allFirms() {meta::legend::crud::hugo::tests::domain::Firm.all()}: meta::legend::crud::hugo::tests::domain::Firm[*];
  createNewFirm(firmName: String[1]) {meta::legend::crud::hugo::tests::domain::Firm.all()}: meta::legend::crud::hugo::tests::domain::Firm[*];
}


Class meta::legend::crud::hugo::tests::domain::Query
{
  name: String[1];
  allFirms() {meta::legend::crud::hugo::tests::domain::Firm.all()}: meta::legend::crud::hugo::tests::domain::Firm[*];
}

Association meta::legend::crud::hugo::tests::domain::FirmEmployee
{
  employees: meta::legend::crud::hugo::tests::domain::Employee[0..*];
  firm: meta::legend::crud::hugo::tests::domain::Firm[1];
}

###Relational
Database  meta::legend::crud::hugo::tests::database::PlaygroundDatabase
(
  Table EMPLOYEE
  (
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    FIRM_ID INTEGER,
    NAME VARCHAR(256)
  )
  Table FIRM
  (
    FIRM_ID INTEGER PRIMARY KEY,
    NAME VARCHAR(256)
  )

  Join Firm_Employee(FIRM.FIRM_ID = EMPLOYEE.FIRM_ID)
)


###Mapping
Mapping meta::legend::crud::hugo::tests::mapping::PlaygroundMapping
(
  *meta::legend::crud::hugo::tests::domain::Employee: Relational
  {
    ~primaryKey
    (
      [meta::legend::crud::hugo::tests::database::PlaygroundDatabase]EMPLOYEE.EMPLOYEE_ID
    )
    ~mainTable [meta::legend::crud::hugo::tests::database::PlaygroundDatabase]EMPLOYEE
    name: [meta::legend::crud::hugo::tests::database::PlaygroundDatabase]EMPLOYEE.NAME
  }
  *meta::legend::crud::hugo::tests::domain::Firm: Relational
  {
    ~primaryKey
    (
      [meta::legend::crud::hugo::tests::database::PlaygroundDatabase]FIRM.FIRM_ID
    )
    ~mainTable [meta::legend::crud::hugo::tests::database::PlaygroundDatabase]FIRM
    employees[domain_Employee]: [meta::legend::crud::hugo::tests::database::PlaygroundDatabase]@Firm_Employee,
    name: [meta::legend::crud::hugo::tests::database::PlaygroundDatabase]FIRM.NAME
  }
)

###Pure
import meta::external::query::graphQL::metamodel::*;
import meta::external::query::graphQL::metamodel::executable::*;
import meta::external::query::graphQL::metamodel::value::*;
import meta::external::query::graphQL::metamodel::typeSystem::*;
import meta::external::query::graphQL::binding::toPure::typeSystem::*;
import meta::external::query::graphQL::transformation::queryToPure::*;
import meta::external::query::graphQL::serialization::*;
import meta::external::query::graphQL::introspection::*;

import meta::pure::runtime::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::test::delta::v1::*;
import meta::pure::mapping::modelToModel::test::delta::*;

import meta::pure::executionPlan::toString::*;

function meta::external::query::graphQL::transformation::queryToPure::tests::testRuntime(): meta::pure::runtime::Runtime[1]
{
  ^meta::pure::runtime::Runtime(
     connections = ^meta::relational::runtime::TestDatabaseConnection(
                      element = meta::legend::crud::hugo::tests::database::PlaygroundDatabase,
                      type = meta::relational::runtime::DatabaseType.H2,
                      timeZone = 'GMT',
                      testDataSetupSqls =
                          'drop table if exists Firm;\n'+
                          'create table Firm(id INT, name VARCHAR(200));\n'+
                          'insert into Firm (id, name) values (1, \'FirmA\');\n'+
                          'insert into Firm (id, name) values (2, \'FirmB\');\n'                         
                   )
    );
}


function <<meta::pure::profiles::test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::testCanGenerateExecutionPlansFromGQLQueryOfAllFirms():Any[*]
{
  let runtime = meta::external::query::graphQL::transformation::queryToPure::tests::testRuntime();

  let gqlDocument = ^Document(
    definitions = 
      [
        ^OperationDefinition(
          type = OperationType.query,
          name = 'firmQuery',
          variables = [],
          directives = [],
          selectionSet = ^Field(
            name = 'allFirms',
            arguments = [],
            directives = [],
            selectionSet = ^Field(
               name = 'name',
              arguments = [],
              directives = []
            )
          )
        )
      ]
  );

  // TODO: How to get the defaultRelationalExtension() ( it is in core_relational package)
  // what is that for?
  let plans = meta::external::query::graphQL::transformation::queryToPure::getPlansFromGraphQL(
                                                                          meta::legend::crud::hugo::tests::domain::Firm,
                                                                          meta::legend::crud::hugo::tests::mapping::PlaygroundMapping,
                                                                          $runtime,
                                                                          $gqlDocument,
                                                                          meta::pure::router::extension::defaultRelationalExtensions()
                                                                      );

  let expected = 'PureExp\n(\n  type = String\n  expression = [Node Index:0] -> serialize(#{meta::legend::crud::hugo::tests::domain::Firm {name}}#)\n  (\n    GlobalGraphFetch\n    (\n      type = PartialClass[impls=[(meta::legend::crud::hugo::tests::domain::Firm | PlaygroundMapping.meta_legend_crud_hugo_tests_domain_Firm)], propertiesWithParameters = [name]]\n      resultSizeRange = *\n      store = meta::legend::crud::hugo::tests::database::PlaygroundDatabase\n      localGraphFetchExecutionNode = \n         RelationalGraphFetch\n         (\n           type = PartialClass[impls=[(meta::legend::crud::hugo::tests::domain::Firm | PlaygroundMapping.meta_legend_crud_hugo_tests_domain_Firm)], propertiesWithParameters = [name]]\n           nodeIndex = 0\n           relationalNode = \n              SQL\n              (\n                type = meta::pure::metamodel::type::Any\n                resultColumns = [("pk_0", INT), ("name", VARCHAR(256))]\n                sql = select "root".FIRM_ID as "pk_0", "root".NAME as "name" from FIRM as "root"\n                connection = TestDatabaseConnection(type = "H2")\n              )\n           children = [\n              \n           ]\n         )\n      children = [\n         \n      ]\n    )\n  )\n)\n';
  let actual = meta::pure::executionPlan::toString::planToString($plans.second->toOne(), true, meta::pure::router::extension::defaultRelationalExtensions());
  
  assertEquals($expected, $actual);
}


function <<meta::pure::profiles::test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::testCanGenerateExecutionPlansFromGQLMutationOfAllFirms():Any[*]
{
  let runtime = meta::external::query::graphQL::transformation::queryToPure::tests::testRuntime();

 
    // mutation with argument values 
   let gqlDocument = ^Document(
    definitions = 
      [
        ^OperationDefinition(
          type = OperationType.mutation,
          name = 'firmQuery',
          variables = [],
          directives = [],
          selectionSet = ^Field(
            name = 'createNewFirm',
            arguments = [
               ^Argument(name='name', value=^StringValue(value='some new firm name'))
            ],
            directives = [],
            selectionSet = ^Field(
               name = 'name',
              arguments = [],
              directives = []
            )
          )
        )
      ]
  );

  // TODO: How to get the defaultRelationalExtension() ( it is in core_relational package)
  // what is that for?
  let plans = meta::external::query::graphQL::transformation::queryToPure::getPlansFromGraphQL(
                                                                          meta::legend::crud::hugo::tests::domain::Firm,
                                                                          meta::legend::crud::hugo::tests::mapping::PlaygroundMapping,
                                                                          $runtime,
                                                                          $gqlDocument,
                                                                          meta::pure::router::extension::defaultRelationalExtensions()
                                                                      );

  let expected = '';
   let actual = meta::pure::executionPlan::toString::planToString($plans.second->toOne(), true, meta::pure::router::extension::defaultRelationalExtensions());
  
  // assertEquals($expected, $actual);
}


function go():Any[*]
{
  // run tests, temporary workaround as the Router cannot be added to relationsal datamart
  meta::external::query::graphQL::transformation::queryToPure::tests::testCanGenerateExecutionPlansFromGQLQueryOfAllFirms();
  // meta::external::query::graphQL::transformation::queryToPure::tests::testCanGenerateExecutionPlansFromGQLMutationOfAllFirms();
}



*/